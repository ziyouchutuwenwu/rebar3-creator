#!/usr/bin/env python

import os
import sys

from lib.project_rebar_config import ProjectRebarConfig
from lib.path_helper import PathHelper
from lib.example_setting import ExampleSetting
from lib.escript_setting import EscriptSetting
from lib.global_rebar3_config import GlobalRebar3Config
from lib.test_template_setting import TestTemplateSetting

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print("please input mode, release, app, lib, escript?")
        os._exit(0)

    elif len(sys.argv) == 2:
        print("project_name?")
        os._exit(0)

    project_type = sys.argv[1]
    project_name = sys.argv[2]
    rel_path = os.getcwd()

    if project_type == "release":
        os.system("rebar3 new release " + project_name)
    elif project_type == "app":
        os.system("rebar3 new app " + project_name)
    elif project_type == "lib":
        os.system("rebar3 new lib " + project_name)
    elif project_type == "escript":
        os.system("rebar3 new escript " + project_name)
    else:
        print("not supported")
        os._exit(0)

    project_config_file = ProjectRebarConfig(
        PathHelper.get_rebar_config_path(rel_path, project_name, "rebar.config")
    )

    project_config_file.replace(
        "{erl_opts, [debug_info]}.",
        "%%  {erl_opts, [native, {hipe, [verbose]}, debug_info]}. \r\n"
        + "%%  {erl_opts, [no_debug_info]}. \r\n"
        + "%%  {erl_opts, [debug_info]}. \r\n"
        + "\r\n"
        + "%%  {ok, {_, [{abstract_code, {_, Ac}}]}} = beam_lib:chunks(code:which(a), [abstract_code]). \r\n"
        + '%%  io:fwrite("~s~n", [erl_prettypr:format(erl_syntax:form_list(Ac))]). \r\n'
        + "%%  vim ~/.erlang.crypt \r\n"
        + '%%  [{debug_info, des3_cbc, [], "12345"}]. \r\n'
        + "\r\n"
        + "%%  ~/.erlang.crypt not needed on compiling, only neened on debugging \r\n"
        + '%%  {erl_opts, [debug_info,{debug_info_key,{des3_cbc,"12345"}}]}. \r\n'
        + "\r\n"
        + "%%  ~/.erlang.crypt needed on compiling\r\n"
        + "{erl_opts, [encrypt_debug_info]}.\n",
    )

    project_config_file.replace(
        "{deps, []}.",
        "{deps, [\r\n"
        + '%%  {sync, ".*", {git, "https://github.com/rustyio/sync", {branch, "master"}}} \r\n'
        + '%%  {cowboy, ".*",{git, "https://github.com/ninenines/cowboy.git", {branch, "master"}}},\r\n'
        + '%%  {cowboy, "1.0.4",{git, "https://github.com/ninenines/cowboy.git", {tag, "1.0.4"}}}\r\n'
        + "]}.\r\n",
    )

    project_config_file.append(
        "\r\n"
        + "{pre_hooks, [ \r\n"
        + '  {clean, "rm -rf ./_build/test"}\r\n'
        + "]}.\r\n"
        + "{provider_hooks, [{pre, [{clean}]}]}.\r\n"
        + '{shell, [{script_file, "on_app_start.erl"}]}.\r\n'
    )

    # options for eunit
    project_config_file.append(
        "\r\n"
        + "{cover_enabled, true}.\r\n"
        + "{eunit_opts, [\r\n"
        + "    verbose, {\r\n"
        + "        report,{\r\n"
        + "            eunit_surefire,[\r\n"
        + '                {dir,"./_build/test"}\r\n'
        + "            ]\r\n"
        + "        }\r\n"
        + "    }\r\n"
        + "]}.\r\n"
    )

    class UpdateReadMe:
        @staticmethod
        def update(path, file_name):
            content = "# 说明"
            content += "\r\n"
            content += "\r\n"
            content += "## `rebar3 deps` 获取依赖"
            content += "\r\n"
            content += "\r\n"
            content += "## `rebar3 compile` 编译"
            content += "\r\n"
            content += "\r\n"
            content += "## `rebar3 shell` 进入调试 shell"
            content += "\r\n"
            content += "\r\n"
            content += "## `rebar3 as prod tar` 打包"
            content += "\r\n"

            fullPath = os.path.join(path, file_name)
            file = open(fullPath, "w+")
            file.write(content)
            file.close()

    GlobalRebar3Config.remove_config()
    GlobalRebar3Config.set_config()

    test_template_setting = TestTemplateSetting(
        PathHelper.get_test_dir_path(rel_path, project_name, project_type)
    )
    test_template_setting.writeEunitTemplate("template_eunit_test.erl")
    test_template_setting.writeCtTemplate("template_SUITE.erl")

    escript_setting = EscriptSetting(PathHelper.get_app_path(rel_path, project_name))
    escript_setting.writeEscriptTemplate("on_app_start.erl")

    ExampleSetting.create_dir(
        PathHelper.get_example_path(rel_path, project_name, project_type)
    )

    UpdateReadMe.update(PathHelper.get_app_path(rel_path, project_name), "README.md")
